generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  progres   Progres?

  @@map("users")
}

model Progres {
  id              Int      @id @default(autoincrement())
  complitedLevels Int[]
  complitedTopics Int[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int      @unique

  @@map("progresses")
}

model Level {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topics    Topic[]

  @@map("levels")
}

model Topic {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     Level    @relation(fields: [levelId], references: [id])
  levelId   Int
  words     Word[]

  @@map("topics")
}

model Word {
  id               Int               @id @default(autoincrement())
  word             String
  image            String
  audio            String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  topic            Topic             @relation(fields: [topicId], references: [id])
  topicId          Int
  translationWords TranslationWord[]

  @@map("words")
}

model TranslationWord {
  id        Int      @id @default(autoincrement())
  ua        String
  es        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  word      Word     @relation(fields: [wordId], references: [id])
  wordId    Int

  @@map("translation_words")
}
